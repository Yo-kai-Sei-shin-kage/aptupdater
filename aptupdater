#!/bin/bash
clear

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
## APTUPDATER by Yokai Seishinkage                          ##
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
## This tool is 100% free to use and modify as you see fit. ##
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
## Modifications and contributons by:                       ##
##                                                          ##
## 1.) deadhead420                                          ##
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##

## DISPLAY USAGE MESSAGE
usage() {
	
	echo -e "\n${Megenta} Usage:${Green} $this${Yellow} [options]\n"
	echo -e "	${Magenta}Default usage displays interactive apt menu\n"
	echo "${Magenta} Options:"
	echo "	${Green}-h|--help	${Yellow}- displays this usage message"
	echo -e "	${Green}-u|--update	${Yellow}- updates $this\n"
	echo "${Magenta} Examples:"
	echo "${Green}	$this"
	echo "	$this ${Yellow}-u"
	echo -e "${Green}	$this ${Yellow}--help\n"
	exit 0

}

update() {
	
	echo -e "\n${Magenta}Updating ${this}...\n"
	wget -O /usr/bin/${this} https://raw.githubusercontent.com/Yo-kai-Sei-shin-kage/aptupdater/master/aptupdater
	chmod +x /usr/bin/${this}
	echo -e "\n${Green}[${this}] successfully updated!\n"
	exit 0

}

## CONFIGURE
conf() {

	## Define colors
	Green=$'\e[0;32m';
	Yellow=$'\e[0;33m';
	Magenta=$'\x1b[95m';
	Red=$'\e[0;31m';
	ColorOff=$'\e[0m';

	## Define this & distro
	this=${0##*/}
	distro=$(cat /etc/lsb-release | grep "DISTRIB_ID" | cut -c12-)
	
	## Define logs
	D_0="/var/lib/${this}"
	F_1="$D_0/update_log.txt"
	F_2="$D_0/upgrade_log.txt"
	F_3="$D_0/dist-upgrade_log.txt"

	## USAGE MESSAGE (doesn't need root or sudo)
	case "$1" in
		-h|--help) usage
		;;
	esac
	
	## CHECK ROOT (fix path to include lolcat)
	if [ "$UID" -ne "0" ]; then
	   echo -e "\n${Red} [${this}] Error: ${Yellow}YOU MUST BE ROOT TO USE THIS!"
	   echo -e " Tip: ${Magenta}Precede your command with 'sudo'${ColorOff}\n"
	   exit 1
	fi

	PATH="${PATH}:/usr/games"
	if (which lolcat &> /dev/null) then
		LOL=true
	else
		LOL=false
	fi

	## UPDATE (needs root or sudo)
	case "$1" in
		-u|--update) update
		;;
	esac

	## Check if log directory exists, if not create it
	if [ ! -d "$D_0" ]; then		
		echo -e "${Red}Error: ${Yellow}No log directory detected!"
		echo -e "${Magenta}Making new log directory."
		mkdir /var/lib/${this}
		echo -e "\n${Green}Log directory created!\n"
		read -p "${Magenta} Press ${Green}<enter> ${Magenta}to continue${ColorOff}"	
	fi

}

## MAIN SCRIPT FUNCTION ##
main() {
clear

## Check file existence and make new file(s) if none are found.
function file_check() {
	
	echo
        
    if [ ! -e "$F_1" ]; then
    	echo -e "${Red} Error: ${Yellow}No previous update_logs detected."
    	echo -e "${Magenta} Making new update_log file."
        touch "$F_1"
	else
        echo -e "${Green} [FILE FOUND]: $F_1"
    fi

    if [ ! -e "$F_2" ]; then
    	echo -e "${Red} Error: ${Yellow}No previous upgrade_logs detected."
        echo -e "${Magenta} Making new upgrade_log file."
        touch "$F_2"
    else
    	echo -e "${Green} [FILE FOUND]: $F_2"
    fi

    if [ ! -e "$F_3" ]; then
        echo -e "${Red} Error: No ${Yellow}previous dist-upgrade_logs detected."
        echo -e "${Magenta} Making new dist-upgrade_log file.\n"
        touch "$F_3"
	else
	    echo -e "${Green} [FILE FOUND]: $F_3\n"
    fi

	echo -e "\n${Green} All log files exist!\n"
	read -p "${Magenta} Press ${Green}<enter> ${Magenta}to continue${ColorOff}"

}

## Deletes the log files.
function remove_log() {

	echo
	rm "$F_1" "$F_2" "$F_3"
	echo -e "${Yellow} All log files have been removed from the system\n"
	read -p "${Magenta} Press ${Green}<enter> ${Magenta}to continue${ColorOff}"

}

time_check() {

	LAST_1="$(tail -n 1 $F_1)"
	LAST_2="$(tail -n 1 $F_2)"
	LAST_3="$(tail -n 1 $F_3)"
	echo

	if [ -z "$LAST_1" ]; then
   		echo -e "${Red} Error: ${Yellow}Update log is empty! Run option 1!"
    else
        echo -e "${Magenta} Last update was: ${Green}$LAST_1"
	fi

	if [ -z "$LAST_2" ]; then
   		echo -e "${Red} Error: ${Yellow}Upgrade log is empty! Run option 2!"
    else
    	echo -e "${Magenta} Last upgrade was: ${Green}$LAST_2"
	fi

	if [ -z "$LAST_3" ]; then
  		echo -e "${Red} Error: ${Yellow}Dist-upgrade log is empty! Run option 3!\n"
    else
    	echo -e "${Magenta} Last dist-upgrade was: ${Green}${LAST_3}\n"
	fi

	read -p "${Magenta} Press ${Green}<enter> ${Magenta}to continue${ColorOff}"

}

## Main script menu. ##
echo -e "\n${Magenta}*${Green} ${USER}${Magenta}@${Green}${HOSTNAME}:${Magenta}# ${Green}${distro} $(uname -o) $(uname -p)
${Magenta}* CPU:${Green} $(lscpu | grep "Model name:" | cut -c24-)
${Magenta}* RAM:${Green} $(free -m | grep "Mem:" | awk '{print $3" MiB / "$2" MiB"}')
${Magenta}*${Green} $(date)${Magenta}\n*${Green} $(uptime -p)${Yellow}\n
|${Green}------------------------${Yellow}|
|  #${Red}~~~~~~~~~~~~~~~~~~${Yellow}#  |
|  # ${Green}1.${Yellow}) ${Magenta}Update       ${Yellow}#  |
|  # ${Green}2.${Yellow}) ${Magenta}Upgrade      ${Yellow}#  |
|  # ${Green}3.${Yellow}) ${Magenta}Dist-upgrade ${Yellow}#  |
|  # ${Green}4.${Yellow}) ${Magenta}Check logs   ${Yellow}#  |
|  # ${Green}5.${Yellow}) ${Magenta}Check time   ${Yellow}#  |
|  # ${Green}6.${Yellow}) ${Magenta}Delete logs  ${Yellow}#  |
|  # ${Green}7.${Yellow}) ${Magenta}Quit         ${Yellow}#  |
|  #${Red}~~~~~~~~~~~~~~~~~~${Yellow}#  |
|${Green}------------------------${Yellow}|\n"

echo -en "${Magenta}\e[4mWhat would you like to do?\e[0m [${Green}1-7${Magenta}]: ${ColorOff}"
read CHOICE
clear

case "$CHOICE" in
    1)    echo -e "${Magenta}UPDATING NOW!${ColorOff}"
          echo "$(date)" >> "$F_1"
          if "$LOL" ; then
          	apt-get update | lolcat
          else
			apt-get update
          fi
          echo -e "${Green}UPDATE COMPLETED!${ColorOff}\n"
          read -p "${Magenta} Press ${Green}<enter> ${Magenta}to continue${ColorOff}"
    ;;
    2)    echo -e "${Magenta}UPGRADING NOW!${ColorOff}\n"
          echo "$(date)" >> "$F_2"
          if "$LOL" ; then
          	apt-get upgrade | lolcat
          else
			apt-get upgrade
          fi
          echo -e "\n${Green}UPGRADE COMPLETED!${ColorOff}\n"
          read -p "${Magenta} Press ${Green}<enter> ${Magenta}to continue${ColorOff}"
    ;;
    3)    echo -e "${Magenta}UPGRADING DIST NOW!${ColorOff}\n"
          echo "$(date)" >> "$F_3"
          if "$LOL" ; then
          	apt-get dist-upgrade | lolcat
          else
			apt-get dist-upgrade
          fi
          echo -e "\n${Green}DIST-UPGRADE COMPLETED!${ColorOff}\n"
          read -p "${Magenta} Press ${Green}<enter> ${Magenta}to continue${ColorOff}"
    ;;
    4)    file_check
    ;;
    5)    time_check
    ;;
    6)    remove_log
    ;;
    7)    clear
          exit 0
    ;;
    *)    echo -e "\n${Red} Error: ${Yellow}Incorrect entry!\n"
    	  read -p "${Magenta} Press ${Green}<enter> ${Magenta}to continue${ColorOff}"
    ;;
esac

}

## MAIN SCRIPT LOOP. ##
conf "$@"
while true
do
main
done
